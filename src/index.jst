'use strict';

// do not edit .js files directly - edit src/index.jst

{{? it.es6 }}
var envHasBigInt64Array = typeof BigInt64Array !== 'undefined';
{{?}}

module.exports = function equal(a, b) {
  if (a === b) return true;

  if (a && b && typeof a ==='object' && typeof b ==='object') {
    if (a.constructor !== b.constructor) return false;

    var length, i, key;
    if (Array.isArray(a)) {
      length = a.length;
      if (length !== b.length) return false;
      for (i = length; i-- !== 0;)
        if (!equal(a[i], b[i])) return false;
      return true;
    }

{{? it.es6 }}
    var keys;
    if (a instanceof Map) {
      if (a.size !== b.size) return false;
      // should be named `iterator` for the sake of variables efficiency
      keys = a.entries();
      while ((i = keys.next()) && !i.done) {
        if (!b.has(i.value[0])) return false;
        if (!equal(i.value[1], b.get(i.value[0]))) return false;
      }

      return true;
    }

    if (a instanceof Set) {
      if (a.size !== b.size) return false;
      // should be named `iterator` for the sake of variables efficiency
      keys = a.entries();
      while ((i = keys.next()) && !i.done)
        if (!b.has(i.value[0])) return false;
      return true;
    }

    if (a.constructor.BYTES_PER_ELEMENT && (
      a instanceof Int8Array ||
      a instanceof Uint8Array ||
      a instanceof Uint8ClampedArray ||
      a instanceof Int16Array ||
      a instanceof Uint16Array ||
      a instanceof Int32Array ||
      a instanceof Uint32Array ||
      a instanceof Float32Array ||
      a instanceof Float64Array ||
      (envHasBigInt64Array && (a instanceof BigInt64Array || a instanceof BigUint64Array))
    )) {
      length = a.length;
      if (length !== b.length) return false;
      for (i = length; i-- !== 0;)
        if (a[i] !== b[i]) return false;
      return true;
    }
{{?}}

    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;
    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();
    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();

    if (Object.keys(a).length !== Object.keys(b).length) return false;

    for(key in a){
      if (Object.prototype.hasOwnProperty.call(a, key) !== Object.prototype.hasOwnProperty.call(b, key)) return false;
      if (!equal(a[key], b[key])) return false;
    }

    return true;
  }

  // true if both NaN, false otherwise
  return a !== a && b !== b;
};
